PROBLEM STATEMENT
A peak element is an element that is strictly greater than its neighbors.

Given a 0-indexed integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.

You may imagine that nums[-1] = nums[n] = -âˆž. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array.

You must write an algorithm that runs in O(log n) time.

 

Example 1:

Input: nums = [1,2,3,1]
Output: 2
Explanation: 3 is a peak element and your function should return the index number 2.
Example 2:

Input: nums = [1,2,1,3,5,6,4]
Output: 5
Explanation: Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6.

PROBLEM SOLUTION

class Solution {
    public int findPeakElement(int[] nums) {
        int m=0;
        int n=nums.length;
        if(n<=1)
        m=0;
        else if(n==2)
        {
            if(nums[0]>nums[1])
            m=0;
            else
            m=1;
        }
        else
        {
            if(nums[n-1]>nums[n-2])
            {
            m=n-1;
           
            }
            else
            {
        for(int i=1;i<(n-1);i++)
        {
            int a=nums[i-1];
            int b=nums[i+1];
            int c=nums[i];
            if(c>a && c>b)
            {
            m=i;
            break;
            }
        }
        }
        }
        return m;
    }
}
